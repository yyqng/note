一、Lua 基本介绍：
	Lua 是一种轻量小巧的脚本语言。其设计目的是为了嵌入应用程序中，从而为应用程序提供灵活的扩展和定制功能。
	Lua 特性：
		轻量级: 编译后仅仅一百余K，可以很方便的嵌入别的程序里。
		可扩展:Lua提供了非常易于使用的扩展接口和机制。
		其它特性:
			支持面向过程(procedure-oriented)编程和函数式编程(functional programming)；
			自动内存管理；只提供了一种通用类型的表（table）；
			语言内置模式匹配；闭包(closure)；函数也可以看做一个值；支持多线程（协同进程，并非操作系统所支持的线程）
			通过闭包和table可以很方便地支持面向对象编程所需要的一些关键机制，比如数据抽象，虚函数，继承和重载等。
	Lua 应用场景
		游戏开发
		独立应用脚本
		Web 应用脚本
		扩展和数据库插件如：MySQL Proxy 和 MySQL WorkBench
		安全系统，如入侵检测系统
	Linux安装 Lua5.3.0：
		curl -R -O http://www.lua.org/ftp/lua-5.3.0.tar.gz
		tar zxf lua-5.3.0.tar.gz
		cd lua-5.3.0
		make linux test
		make install

二、语法
	Lua 交互式编程模式可以通过命令 lua -i 或 lua 来启用；
	脚本执行：lua test.lua
				./test.lua  #但是test.lua 文件第一行必须指定lua位置，例如：#!/usr/local/bin/lua
	注释:	--单行注释	--[[多行注释--]]
	标识符：命名要求与C++类似
	保留关键字：
				函数与变量：nil	return local end for function
				逻辑运算：and not or true false
				循环与判断：while repeat until break do if else elseif then in
	全局变量：给一个变量赋值默认创建一个全局变量，不需要声明；赋值为nil即删除该变量。

三、数据类型
	type(type))            --> function
	type(nil))             --> nil
	type(X))               --> nil
	type(X)) == "nil"      --> 比较结果为true
	type("Hello world"))   
		--> string，例：'stringA',"stringB"，
	   --> "[[stringC：换行可以不加\，转义字符不用转义）]]"
	   --> 数字字符串进行算术操作时，会将数字字符串转成一个数字:
	   --> string.upper(argument)  string.lower(argument)
	   --> s = string.gsub("aaaa","a","z",3); s为"zzza"，做3次替换，默认全部替换
	   --> string.find("Hello Lua user", "Lua", 1);	string.len(arg)
	   --> string.reverse(arg); 	string.char(97,98,99,100);	string.byte("ABCD")
	   --> string.rep(string, n);	--返回n个拷贝
	   --> string.gmatch(str, pattern)  -->string.match(str, pattern, init)
	type(10.4*3))          --> number，默认的number类型为double（可在luaconf.h里修改）
	type(print))           --> function
	type(true))            --> boolean
	type(type(X)))         --> string
	print(#"www")          --> 3
	
	local tbl1 = {}                                     --> 创建一个 table
	local tbl2 = {"apple", "pear", "orange", "grape"}   --> 创建一个 table，索引以1开始
	tbl2["key"] = "value"                               --> 创建一个 table是必要的，否则无法使用
	tbl2[10] = 22                                       --> table 长度会自动增长，没初始化的为nil
	
	function（函数）："第一类值（First-Class Value）"，可以存在变量里:
		function factorial1(n)
			if n == 0 then
				return 1
			else
				return n * factorial1(n - 1)
			end
		end
	function 可以以匿名函数（anonymous function）的方式通过参数传递:
		function testFun(tab,fun)
			for k ,v in pairs(tab) do
				print(fun(k,v));
			end
		end

		tab={key1="val1",key2="val2"};
		testFun(tab,
		function(key,val) --匿名函数
			return key.."="..val;
		end
		);	
	thread（线程）
		在 Lua 里，最主要的线程是协同程序（coroutine）。它跟线程（thread）差不多，拥有自己独立的栈、局部变量和指令指针，可以跟其他协同程序共享全局变量和其他大部分东西，但是协程任意时刻只能运行一个，并且只有被挂起（suspend）时才会暂停
	userdata（自定义类型）
		userdata 是一种用户自定义数据，用于表示一种由应用程序或 C/C++ 语言库所创建的类型，可以将任意 C/C++ 的任意数据类型的数据（通常是 struct 和 指针）存储到 Lua 变量中调用。

四、变量
	Lua 变量有三种类型：全局变量、局部变量、表中的域。除非用 local 声明，否则全是全局变量。
	多个变量同时赋值：		a, b = 10, 2*x       <-->       a=10; b=2*x
						先计算右边所有的值，然后再执行赋值操作
						a. 变量个数 > 值的个数             按变量个数补足nil
						b. 变量个数 < 值的个数             多余的值会被忽略
							a, b = f()
						f()返回两个值，第一个赋给a，第二个赋给b。
	使用局部变量好处：1. 避免命名冲突。	2. 访问速度更快。
	索引：
		对 table 的索引：	t[s]-- 一般写法
							t.s -- 当索引s为字符串类型时的一种简化写法
	
五、循环与判断
	while(condition)
	do
	   statements
	end
	
		for var=exp1,exp2,exp3 do  --var从exp1变到exp2，exp3为步长，默认为1。
			<执行体>  
		end
	
	for i,v in ipairs(a) 
		do print(v) 
	end 
	
		repeat
		   statements
		until( condition )
	
	if(x)
	then
	   --[ 在x为 true 时执行 --]
	elseif(y)
	then
	   --[ 在y 为 true 时执行 --]
    else
	   --[ 在x y 均为 false 时执行 --]
	end
	
六、函数与运算符
	--可变参数列表使用三点 ... 表示。
	local function add(...)  --局部函数
	local s = 0  
	  for i, v in ipairs{...} do   --> {...} 表示一个由所有变长参数构成的数组  
		s = s + v  
	  end  
	  return s  
	end  
	print(add(3,4,5,6,7))  --->25
	
	fwrite("runoob\n")       --->fmt = "runoob", 没有变长参数。  
	fwrite("%d%d\n", 1, 2)   --->fmt = "%d%d", 变长参数为 1 和 2
	
	与C语言的不同点：
		算数运算符：乘幂：10^2 结果为 100
		关系运算符：不等：~=
		逻辑运算符：and not or 
		其他运算符：连接两个字符串：..		
					返回字符串或表的长度：#	

七、数组、迭代器和表
	数组：初始化数组时不需要填写key，始终使用数字作为其key
		array = {}
		array = {"Lua", "Tutorial"}
	表（table）：
		Lua table 使用关联型数组，可用任意类型非nil的值来作数组的索引，可扩容。
		赋值时会进行深拷贝。获取 table 的长度的时候无论是使用 # 还是 table.getn 
		其都会在索引中断的地方停止计数，而导致无法正确取得 table 的长度。Lua table 
		可解决模块（module）、包（package）和对象（Object）的问题。 
		mytable = {}           -- 初始化表
		mytable[1]= "Lua"      -- 指定值
		mytable = nil          -- 移除引用 -- lua 垃圾回收会释放内存
		
		fruits = {"banana","orange","apple"}  --  连接字符串
		table.concat(fruits)                  --> bananaorangeapple
		table.concat(fruits,", ")             --> banana, orange, apple
		table.concat(fruits,", ", 2,3)        --> orange, apple
		table.insert(fruits,"mango")          --  尾部插入mango
		table.insert(fruits,2,"grapes")       --  fruits[2]变为grapes，其余后移
		table.remove(fruits)                  --  移除最后一个元素
		table.sort(fruits)                    --  排序
		
	迭代器：
	for k, v in pairs(t) do
		print(k, v)							  --  k, v为变量列表；pairs(t)为表达式列表
	end
	
	泛型 for 的执行过程：
	1 初始化，计算pairs(t)结果：迭代函数、状态常量、控制变量，结果个数不足赋nil，多出部分会被忽略；
	2 将状态常量和控制变量作为参数调用迭代函数；
	3 将迭代函数返回的值赋给变量列表。
	4 如果返回的第一个值为nil循环结束，否则执行循环体。
	5 回到第二步再次调用迭代函数
	在Lua中我们常常使用函数来描述迭代器，每次调用该函数就返回集合的下一个元素。
	Lua 的迭代器包含以下两种类型：无状态的迭代器 多状态的迭代器
	
	无状态迭代器：
		function square(max,i)
		   if i<max
		   then
			  i = i+1
		   return i, i*i
		   end
		end

		for i,n in square,3,0   -- 分别为：变量列表、迭代函数
		do
		   print(i,n)           -->  1	1    2	4    3	6  (换行输出)
		end

	pairs 和 ipairs 区别：
		同：都是能遍历集合（表、数组）
		异：ipairs 仅仅遍历值，按照索引升序遍历，遇到 nil 则退出。
   		 pairs: 迭代 table，可以遍历表中所有的 key 可以返回 nil
		代码示例：

		local tab= { [1] = "a", [3] = "b", [4] = "c" } 
		for i,v in pairs(tab) do        --> a b c (换行输出)
			print( tab[i] ) 
		end 

		for i,v in ipairs(tab) do       --> a (k=2时断开)
			print( tab[i] ) 
		end

			
八、Lua 模块与包
	模块的定义，例：
		module = {}          -- 文件名为 module.lua，定义一个名为 module 的模块
		module.constant = "定义一个常量，能从外部访问"
		function module.func1()
			io.write("定义一个公有函数，能从外部访问！\n")
		end
		 
		local function func2()
			print("定义一个私有函数，不能从外部访问！")
		end

		function module.func3()    --  公有函数
			func2()
		end

		return module
		
		
	lua模块的加载：
		路径的设置：
			export LUA_PATH="~/lua/?.lua;;" ；最后的 2 个 ";;" 表示新路径后面加上原路径。
			LUA_PATH初始化package.path；调用 package.loadfile 来加载模块
		
		require("module")           --  加载module.lua,搜索路径为package.path 
		print(module.constant)      --> 定义一个常量，能从外部访问
		module.func3()              --> 定义一个私有函数，不能从外部访问！
		
		local m = require("module") --  别名变量 m
		print(m.constant)
		m.func3()
		
	C包的加载：
		路径的设置：
			export LUA_CPATH="~/lua/?.lua;;" ；最后的 2 个 ";;" 表示新路径后面加上原路径。
			LUA_CPATH初始化package.cpath；调用 package.loadlib 来加载模块

		local path = "/usr/local/lua/lib/libluasocket.so"
		-- Window 平台： path = "C:\\windows\\luasocket.dll"
		local f = assert(loadlib(path, "luaopen_socket"))   -- 检测错误
		f()  											    -- 调用初始化函数真正打开库

九、元表（Metatable）
	1.元表允许我们改变table的行为，每个行为关联了对应的元方法。
		设置元表：     mytable = setmetatable({},{})
		返回对象元表： getmetatable(mytable)